name: "test-hooks"                      # name of the root role, should match the filename
defaults:                               # kv-map of var defaults, lower priority than vars
  echosleep_id: "echosleep-unknown"     # for example this one will be overridden in all child roles
  n_tasks: 2                            # even though it's a number, it's stored as string (all vars are of type string)
  timeout: 5s                           # string, formatted as Go time.Duration
vars: {}                                # kv-map of vars, same as defaults but higher priority (can be omitted if empty)
roles:                                  # if a role has a "roles" list, it's an "aggregator role"
  - name: varsleep-iter-{{it}}          # name of this role, templated against the "it" variable
    for:                                # if a role has a "for" statement, it generates multiple instances in memory, and it's said to be an "iterator role"
      begin: 0                          # range for the iterator variable
      end: "{{Atoi(n_tasks) - 1}}"      # we can use template syntax here to make the cardinality configurable at launch time
      var: it                           # name of the iterator variable
    defaults: {}                        # kv-map of defaults for this role, would override anything defined in the parent's or global defaults, but be overridden by any var anywhere, as well as any defaults in child roles (can be omitted if empty)
    vars:                               # these vars will override anything defined in defaults anywhere, as well as in vars of parent roles
      echosleep_seconds: "3"
      echosleep_id: "echosleep-{{it}}"  # variable parametrized against a variable
    roles:                              # besides being an iterator role, this one is also an aggregator
      - name: enter_RUNNING-{{it}}      # role name parametrized against a variable defined in its parent role
        vars:
          echosleep_id: enter_RUNNING-{{it}}  # third override of the same variable, this is the one that will stick
        task:                           # if it has a "task" statement, it is a "task role"
          load: "echosleep"             # name of the task template to load (assumed to be in the same repo, same revision)
          trigger: enter_RUNNING        # if a trigger is defined, the task is treated as a hook; allowed values include: enter_<STATE>, leave_<STATE>, before_<EVENT>, after_<EVENT>, where <STATE> and <EVENT> are valid state or event names respectively (only applies to task templates of control mode "basic")
          timeout: "{{ timeout }}"      # timeout for the task to finish on its own, otherwise it'll be killed; hooks default to 30s, basic tasks to 0s (no timeout) (only applies to task templates of control mode "basic")
          critical: false               # if true (default), a failed hook will block the transition (only applies to task templates of control mode "basic", if a trigger is defined; i.e. only applies to hooks)
      - name: leave_RUNNING-{{it}}
        vars:
          echosleep_id: leave_RUNNING-{{it}}
        task:
          load: "echosleep"
          trigger: leave_RUNNING
          timeout: "{{ timeout }}"
          critical: true
